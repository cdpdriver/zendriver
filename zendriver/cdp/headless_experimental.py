# DO NOT EDIT THIS FILE!
#
# This file is generated from the CDP specification. If you need to make
# changes, edit the generator and regenerate all of the modules.
#
# Specification verion: 1.3
#
#
# CDP domain: HeadlessExperimental (experimental)

from __future__ import annotations

import typing
from dataclasses import dataclass

from deprecated.sphinx import deprecated


if typing.TYPE_CHECKING:
    from collections.abc import Generator

    from .util import T_JSON_DICT


@dataclass
class ScreenshotParams:
    """
    Encoding options for a screenshot.
    """

    #: Image compression format (defaults to png).
    format_: str | None = None

    #: Compression quality from range [0..100] (jpeg and webp only).
    quality: int | None = None

    #: Optimize image encoding for speed, not for resulting size (defaults to false)
    optimize_for_speed: bool | None = None

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        if self.format_ is not None:
            json['format'] = self.format_
        if self.quality is not None:
            json['quality'] = self.quality
        if self.optimize_for_speed is not None:
            json['optimizeForSpeed'] = self.optimize_for_speed
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ScreenshotParams:
        return cls(
            format_=None if json.get('format') is None else str(json['format']),
            quality=None if json.get('quality') is None else int(json['quality']),
            optimize_for_speed=None if json.get('optimizeForSpeed') is None else bool(json['optimizeForSpeed']),
        )

    @classmethod
    def from_json_optional(cls, json: T_JSON_DICT | None) -> ScreenshotParams | None:
        if json is None:
            return None
        return cls.from_json(json)


def begin_frame(
    *,
    frame_time_ticks: float | None = None,
    interval: float | None = None,
    no_display_updates: bool | None = None,
    screenshot: ScreenshotParams | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[bool, str | None]]:
    """
    Sends a BeginFrame to the target and returns when the frame was completed. Optionally captures a
    screenshot from the resulting frame. Requires that the target was created with enabled
    BeginFrameControl. Designed for use with --run-all-compositor-stages-before-draw, see also
    https://goo.gle/chrome-headless-rendering for more background.

    :param frame_time_ticks: *(Optional)* Timestamp of this BeginFrame in Renderer TimeTicks (milliseconds of uptime). If not set, the current time will be used.
    :param interval: *(Optional)* The interval between BeginFrames that is reported to the compositor, in milliseconds. Defaults to a 60 frames/second interval, i.e. about 16.666 milliseconds.
    :param no_display_updates: *(Optional)* Whether updates should not be committed and drawn onto the display. False by default. If true, only side effects of the BeginFrame will be run, such as layout and animations, but any visual updates may not be visible on the display or in screenshots.
    :param screenshot: *(Optional)* If set, a screenshot of the frame will be captured and returned in the response. Otherwise, no screenshot will be captured. Note that capturing a screenshot can fail, for example, during renderer initialization. In such a case, no screenshot data will be returned.
    :returns: A generator
    :rtype: Generator[T_JSON_DICT, T_JSON_DICT, tuple[bool, str ` None]]
    """

    params: T_JSON_DICT = {}
    if frame_time_ticks is not None:
        params['frameTimeTicks'] = frame_time_ticks
    if interval is not None:
        params['interval'] = interval
    if no_display_updates is not None:
        params['noDisplayUpdates'] = no_display_updates
    if screenshot is not None:
        params['screenshot'] = screenshot.to_json()
    cmd_dict: T_JSON_DICT = {
        'method': 'HeadlessExperimental.beginFrame',
        'params': params,
    }
    json = yield cmd_dict
    return (bool(json['hasDamage']), None if json.get('screenshotData') is None else str(json['screenshotData']))


@deprecated(version='1.3')
def disable() -> Generator[T_JSON_DICT, T_JSON_DICT]:
    """
    Disables headless events for the target.

    .. deprecated:: 1.3
    :returns: A generator
    :rtype: Generator[T_JSON_DICT, T_JSON_DICT]
    """

    cmd_dict: T_JSON_DICT = {
        'method': 'HeadlessExperimental.disable',
    }
    json = yield cmd_dict


@deprecated(version='1.3')
def enable() -> Generator[T_JSON_DICT, T_JSON_DICT]:
    """
    Enables headless events for the target.

    .. deprecated:: 1.3
    :returns: A generator
    :rtype: Generator[T_JSON_DICT, T_JSON_DICT]
    """

    cmd_dict: T_JSON_DICT = {
        'method': 'HeadlessExperimental.enable',
    }
    json = yield cmd_dict
