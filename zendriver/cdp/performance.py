# DO NOT EDIT THIS FILE!
#
# This file is generated from the CDP specification. If you need to make
# changes, edit the generator and regenerate all of the modules.
#
# Specification verion: 1.3
#
#
# CDP domain: Performance

from __future__ import annotations

import typing
from dataclasses import dataclass

from deprecated.sphinx import deprecated

from .util import event_type


if typing.TYPE_CHECKING:
    from collections.abc import Generator

    from .util import T_JSON_DICT


@dataclass
class Metric:
    """
    Run-time execution metric.
    """

    #: Metric name.
    name: str

    #: Metric value.
    value: float

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        json['name'] = self.name
        json['value'] = self.value
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Metric:
        return cls(
            name=str(json['name']),
            value=float(json['value']),
        )

    @classmethod
    def from_json_optional(cls, json: T_JSON_DICT | None) -> Metric | None:
        if json is None:
            return None
        return cls.from_json(json)


def disable() -> Generator[T_JSON_DICT, T_JSON_DICT]:
    """
    Disable collecting and reporting metrics.
    :returns: A generator
    :rtype: Generator[T_JSON_DICT, T_JSON_DICT]
    """

    cmd_dict: T_JSON_DICT = {
        'method': 'Performance.disable',
    }
    json = yield cmd_dict


def enable(
    time_domain: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT]:
    """
    Enable collecting and reporting metrics.

    :param time_domain: *(Optional)* Time domain to use for collecting and reporting duration metrics.
    :returns: A generator
    :rtype: Generator[T_JSON_DICT, T_JSON_DICT]
    """

    params: T_JSON_DICT = {}
    if time_domain is not None:
        params['timeDomain'] = time_domain
    cmd_dict: T_JSON_DICT = {
        'method': 'Performance.enable',
        'params': params,
    }
    json = yield cmd_dict


@deprecated(version='1.3')
def set_time_domain(
    time_domain: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT]:
    """
    Sets time domain to use for collecting and reporting duration metrics.
    Note that this must be called before enabling metrics collection. Calling
    this method while metrics collection is enabled returns an error.

    .. deprecated:: 1.3

    **EXPERIMENTAL**

    :param time_domain: Time domain
    :returns: A generator
    :rtype: Generator[T_JSON_DICT, T_JSON_DICT]
    """

    params: T_JSON_DICT = {}
    params['timeDomain'] = time_domain
    cmd_dict: T_JSON_DICT = {
        'method': 'Performance.setTimeDomain',
        'params': params,
    }
    json = yield cmd_dict


def get_metrics() -> Generator[T_JSON_DICT, T_JSON_DICT, list[Metric]]:
    """
    Retrieve current values of run-time metrics.

    :returns: A generator
    :rtype: Generator[T_JSON_DICT, T_JSON_DICT, list[Metric]]
    """

    cmd_dict: T_JSON_DICT = {
        'method': 'Performance.getMetrics',
    }
    json = yield cmd_dict
    return [Metric.from_json(i) for i in json.get('metrics', [])]


@event_type('Performance.metrics')
@dataclass
class Metrics:
    """
    Current values of the metrics.
    """

    #: Current values of the metrics.
    metrics: list[Metric]
    #: Timestamp title.
    title: str

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Metrics:
        return cls(
            metrics=[Metric.from_json(i) for i in json.get('metrics', [])],
            title=str(json['title']),
        )

    @classmethod
    def from_json_optional(cls, json: T_JSON_DICT | None) -> Metrics | None:
        if json is None:
            return None
        return cls.from_json(json)
